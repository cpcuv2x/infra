version: "3.3"
services:
  gateway:
    image: nginx:1.20.2-alpine
    ports:
      - "8180:80"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf

  web-service:
    image: cpcuv2x/web-service:${WS_IMAGE_TAG}
    environment:
      APP_PORT: ${WS_APP_PORT}
      JWT_SECRET: ${WS_JWT_SECRET}
      JWT_EXPIRATION_TIME: ${WS_JWT_EXPIRATION_TIME}
      DATABASE_URL: ${WS_DATABASE_URL}
      KAFKA_ENABLED: ${WS_KAFKA_ENABLED}
      KAFKA_HOST: ${WS_KAFKA_HOST}
      KAFKA_JSON_EVENTS_TOPIC_NAME: ${WS_KAFKA_JSON_EVENTS_TOPIC_NAME}
    ports:
      - "5000:5000"
    volumes:
      - web-service-images:/usr/src/app/.images
    restart: always

  web-client:
    image: cpcuv2x/web-client:${WC_IMAGE_TAG}
    environment:
      VITE_GOOGLE_MAPS_API_KEY: ${WC_VITE_GOOGLE_MAPS_API_KEY}
      VITE_WEB_SERVICES_URL: ${WC_VITE_WEB_SERVICES_URL}
      VITE_WEB_SOCKET_URL: ${WC_VITE_WEB_SOCKET_URL}
    ports:
      - "3000:3000"

  postgresdb:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: mysecretpassword
    volumes:
      - postgresdb-pgdata:/var/lib/postgresql/data

  zoo:
    image: confluentinc/cp-zookeeper:7.0.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo:2888:3888
    volumes:
      - zoo-data:/var/lib/zookeeper/data
      - zoo-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,LISTENER_HAMO://${KAFKA_HOST}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT,LISTENER_HAMO:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      - zoo

  influxdb:
    image: influxdb:2.1
    ports:
      - "8086:8086"
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_INIT_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_INIT_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=my-org
      - DOCKER_INFLUXDB_INIT_BUCKET=my-bucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_INIT_ADMIN_TOKEN}
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2

  telegraf:
    image: telegraf:latest
    environment:
      - INFLUX_TOKEN=${TELEGRAF_INFLUX_TOKEN}
    volumes:
      - ./telegraf.conf:/etc/telegraf/telegraf.conf

  media-server:
    image: alfg/nginx-rtmp
    ports:
      - "1935:1935"
      - "8080:80"
    volumes:
      - "media-server-hls:/opt/data/hls"

volumes:
  web-service-images:
  postgresdb-pgdata:
  zoo-data:
  zoo-log:
  kafka-data:
  influxdb-data:
  influxdb-config:
  media-server-hls: